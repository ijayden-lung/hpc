"""
Common functionality for finding pipeline output files
"""
import os
import requests
from tenxpy.constants import ANALYSIS_BASE_PATH, SHIMULATE_URL, DEMUX_PIPELINE_NAME

def _format_pipestance_run_dir(version, run_number):
    assert type(run_number) == int and run_number >= 0
    return '%s-%s' % (version, run_number) if version != 'HEAD' else 'HEAD'

def get_flowcell(lena_sid):
    """ Get the (first) sequencing run flowcell ID for a Lena ID """
    j = get_lena_json(lena_sid)
    return j['sample_bag']['sample_defs'][0]['sequencing_run']['name']

def get_sample_indices(lena_sid):
    """ Get the (first) set of SI sequences for a Lena ID """
    j = get_lena_json(lena_sid)
    sis = j['sample_bag']['sample_defs'][0]['sample_indexes']
    return [si['seq'] for si in sis]

def get_sample_description(lena_sid):
    """ Get the sample description for a Lena ID """
    return get_lena_json(lena_sid)['sample_bag']['description']

def get_pipestance_path(lena_sid, pipeline=None, version='HEAD', run_number=0):
    """ Get path to pipestance on filesystem used by MARSOC """
    # Check if metasample that spans multiple flowcells
    is_metasample = os.path.exists(os.path.join(ANALYSIS_BASE_PATH, str(lena_sid)))
    if is_metasample:
        fc = str(lena_sid)
    else:
        fc = get_flowcell(lena_sid)

    # Infer pipeline if not specified
    if pipeline is None:
        pipelines_dir = os.path.join(ANALYSIS_BASE_PATH, fc)
        non_demux_pipes = list(set(os.listdir(pipelines_dir)) - set([DEMUX_PIPELINE_NAME]))
        if len(non_demux_pipes) != 1:
            raise ValueError('Could not infer pipeline. Found: %s' % str(non_demux_pipes))
        else:
            pipeline = non_demux_pipes[0]

    if version == 'HEAD':
        check_dir = os.path.join(ANALYSIS_BASE_PATH, fc, pipeline, str(lena_sid),
                                 _format_pipestance_run_dir(version, run_number))
        if not os.path.exists(check_dir):
            # Sometimes "HEAD" doesn't exist because MARSOC screwed up.
            # Take the first run if there's a single one.
            # Skip broken symlinks.
            runs_dir = os.path.dirname(check_dir)
            runs = [x for x in os.listdir(runs_dir) if os.path.exists(os.path.join(runs_dir, x))]
            if len(runs) == 0:
                raise ValueError('HEAD was specified for the run version but no runs were found under %s' % runs_dir)
            if len(runs) == 1:
                return os.path.join(runs_dir, runs[0])
            else:
                raise ValueError('HEAD was specified for the run version but HEAD was not found and multiple runs were found under %s' % runs_dir)



    return os.path.join(ANALYSIS_BASE_PATH, fc, pipeline, str(lena_sid),
                        _format_pipestance_run_dir(version, run_number))

def get_demux_pipestance_path(flowcell, pipeline=DEMUX_PIPELINE_NAME, version='HEAD',
                              run_number=0):
    """ Get the path to a flowcell's demultiplex pipestance """
    return os.path.join(ANALYSIS_BASE_PATH, flowcell, pipeline, flowcell,
                        _format_pipestance_run_dir(version, run_number))

def get_out_file(lena_sid, filename, pipeline=None, version='HEAD', run_number=0):
    """ Get the path to a single pipestance output file """
    return os.path.join(get_pipestance_path(lena_sid, pipeline, version, run_number), 'outs', filename)

def get_lena_json(lena_sid):
    """ Get the json bag for a Lena ID """
    r = requests.get(SHIMULATE_URL + '/' + str(lena_sid))
    return r.json()

def get_whitelist_name(lena_sid):
    return get_lena_json(lena_sid)["sample_bag"]["barcode_set"]["name"]
