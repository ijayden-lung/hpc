
from websummary import summarize
import cellranger.vdj.constants as vdj_constants
from cellranger.websummary.metrics import VDJMetricAnnotations
import cellranger.webshim.common as cr_webshim
import cellranger.webshim.constants.shared as shared
from cellranger.websummary.summary_tab import pipeline_info_table, add_data
from cellranger.webshim.constants.shared import PIPELINE_VDJ

REFERENCE_GENOME_KEY = "vdj_reference_genomes"
VDJ_RANK_PLOT_HELP = [["Barcode Rank Plot",
                  ["The plot shows the count of filtered UMIs mapped to each barcode. A barcode must have a contig that aligns to a V segment to be identified as a targeted cell. (In the denovo case, the only requirement is a contig's presence.) There must also be at least three filtered UMIs with at least two read pairs each. It is possible that a barcode with at least as many filtered UMIs as another cell-associated barcode is not identified as a targeted cell. The color of the graph is based on the local density of cell-associated barcodes."]]]


def vdj_hero_metrics(metadata, sample_data):
    """
    Inputs:
        - metadata: VdjMetricAnnotation object
        - sample_data: webshim.data.SampleData object
    Return:
        - Dictionary that will populate the hero metrics in the web summary
    """
    if sample_data is None or sample_data.summary is None:
        return None


    # TODO: This is a HACK because hero metrics are fixed keys
    fake_name = {
        'vdj_filtered_bcs': 'filtered_bcs_transcriptome_union',
        'vdj_total_raw_read_pairs_per_filtered_bc': 'multi_transcriptome_total_raw_reads_per_filtered_bc',
        'multi_vdj_assembly_contig_pair_productive_full_len_bc_count': 'filtered_bcs_median_unique_genes_detected',
    }

    HERO_METRIC_KEYS = ['vdj_filtered_bcs', 'vdj_total_raw_read_pairs_per_filtered_bc']
    if sample_data.summary.get(REFERENCE_GENOME_KEY, None):
        HERO_METRIC_KEYS.append('multi_vdj_assembly_contig_pair_productive_full_len_bc_count')

    data = {}
    for key in HERO_METRIC_KEYS:
        metrics = metadata.gen_metric_list(sample_data.summary, [key])
        for metric in metrics:
            data[fake_name[metric.key]] = metric.gen_metric_dict()

    # No need to raise alert on vdj_filtered_bcs since that will be done in the
    # cell calling table

    return data


def create_table_with_alarms(table_key, title, metric_keys, alarm_keys,
                             metadata, sample_data, chain_type=None):
    """
    Inputs:
        - table_key: Return te result in a dictionary with this key
        - title: The title for the table in the web summary
        - metric_keys: Use these keys to generate metric rows
        - alarm_keys: Use these keys for raising alerts
        - metadata: VdjMetricAnnotation object
        - sample_data: webshim.data.SampleData object
        - chain_type: (Optional) One of vdj_constants.CHAIN_TYPE_SPECS defining if it's a T or B or both
    """
    if sample_data is None or sample_data.summary is None:
        return None

    data_dict = {}

    metrics = metadata.gen_metric_list(
        sample_data.summary, metric_keys, chain_type=chain_type)
    if metrics:
        data_dict["help"] = {'title': title, 'data': metadata.gen_metric_helptext(
            metric_keys, chain_type=chain_type)}
        data_dict["table"] = {
            "rows": [[metric.name, metric.value_string] for metric in metrics]}

    if not data_dict:
        return None

    result = {table_key: data_dict}

    # Alerts.
    if alarm_keys:
        alarms = metadata.gen_metric_list(
            sample_data.summary, alarm_keys, chain_type=chain_type)
        new_alarms = [
            metric.alarm_dict for metric in alarms if metric.alarm_dict]

        if new_alarms:
            result['alarms'] = new_alarms

    return result


def vdj_enrichment_table(metadata, sample_data, chain_type):
    """
    Inputs:
        - metadata: VdjMetricAnnotation object
        - sample_data: webshim.data.SampleData object
        - chain_type: One of vdj_constants.CHAIN_TYPE_SPECS defining if it's a T or B or both
    Return:
        - Dictionary that will populate the enrichment table in the web summary which contains
        the reads mapped to any vdj gene and reads mapped to individual chains.
    """
    VDJ_ENRICHMENT_KEYS = [
        'multi_vdj_recombinome_mapped_reads_frac',
        '{chain}_vdj_recombinome_mapped_reads_frac',
    ]
    return create_table_with_alarms("vdj_enrichment", "Enrichment",
                                    VDJ_ENRICHMENT_KEYS, VDJ_ENRICHMENT_KEYS,
                                    metadata, sample_data, chain_type=chain_type)


def vdj_expression_table(metadata, sample_data, chain_type):
    """
    Inputs:
        - metadata: VdjMetricAnnotation object
        - sample_data: webshim.data.SampleData object
        - chain_type: One of vdj_constants.CHAIN_TYPE_SPECS defining if it's a T or B or both
    Return:
        - Dictionary that will populate the expression table in the web summary which contains the
        median UMIs for each chain
    """
    VDJ_EXPRESSION_KEYS = [
        '{chain}_vdj_assembly_umis_per_cell_median',
    ]
    return create_table_with_alarms("vdj_expression", "V(D)J Expression",
                                    VDJ_EXPRESSION_KEYS, VDJ_EXPRESSION_KEYS,
                                    metadata, sample_data, chain_type=chain_type)


def vdj_sequencing_table(metadata, sample_data):
    """
    Inputs:
        - metadata: VdjMetricAnnotation object
        - sample_data: webshim.data.SampleData object
    Return:
        - Dictionary that will populate the sequencing table in the web summary which contains the
        number of read pairs, valid barcodes and various Q30 metrics
    """
    VDJ_SEQUENCING_KEYS = [
        'VDJ_total_read_pairs',
        'vdj_good_bc_frac',
        'VDJ_bc_bases_with_q30_frac',
        'VDJ_read_bases_with_q30_frac',
        'VDJ_read2_bases_with_q30_frac',
        'VDJ_sample_index_bases_with_q30_frac',
        'VDJ_umi_bases_with_q30_frac',
    ]
    return create_table_with_alarms("vdj_sequencing", "Sequencing",
                                    VDJ_SEQUENCING_KEYS, VDJ_SEQUENCING_KEYS,
                                    metadata, sample_data)


def load_paired_metrics_from_chain_type(chain_type):
    assert chain_type in vdj_constants.CHAIN_TYPE_SPECS
    if chain_type == vdj_constants.TR_CHAIN_TYPE:
        return ['TRA_TRB_vdj_assembly_contig_pair_productive_full_len_bc_frac']
    elif chain_type == vdj_constants.IG_CHAIN_TYPE:
        return [
            'IGK_IGH_vdj_assembly_contig_pair_productive_full_len_bc_frac',
            'IGL_IGH_vdj_assembly_contig_pair_productive_full_len_bc_frac'
        ]
    else:
        return [
            'TRA_TRB_vdj_assembly_contig_pair_productive_full_len_bc_frac',
            'IGK_IGH_vdj_assembly_contig_pair_productive_full_len_bc_frac',
            'IGL_IGH_vdj_assembly_contig_pair_productive_full_len_bc_frac'
        ]


def vdj_annotation_table(metadata, sample_data, chain_type):
    """
    Inputs:
        - metadata: VdjMetricAnnotation object
        - sample_data: webshim.data.SampleData object
        - chain_type: One of vdj_constants.CHAIN_TYPE_SPECS defining if it's a T or B or both
    Return:
        - Dictionary that will populate the annotation table in the web summary
    """
    VDJ_ANNOTATION_KEYS = [
        'multi_vdj_assembly_contig_pair_productive_full_len_bc_frac',
    ]
    VDJ_ANNOTATION_KEYS.extend(load_paired_metrics_from_chain_type(chain_type))
    VDJ_ANNOTATION_KEYS.extend([
        'multi_raw_vdj_paired_clonotype_diversity',
        '{chain}_vdj_assembly_contig_bc_frac',
        '{chain}_vdj_assembly_cdr_detected_bc_frac',
        '{chain}_vdj_assembly_contig_full_len_bc_frac',
        '{chain}_vdj_assembly_prod_cdr_bc_frac',
    ])
    return create_table_with_alarms("vdj_annotation", "V(D)J Annotation",
                                    VDJ_ANNOTATION_KEYS, VDJ_ANNOTATION_KEYS,
                                    metadata, sample_data, chain_type=chain_type)


def vdj_cell_call_table(metadata, sample_properties, sample_data):
    """
    Inputs:
        - metadata: VdjMetricAnnotation object
        - sample_properties: webshim.constants.vdj.VdjSampleProperties
        - sample_data: webshim.data.SampleData object
    Return:
        - Dictionary that will populate the cell calling table in the web summary
        and plots the barcode rank plot
    """

    VDJ_CELL_CALL_KEYS = [
        'vdj_filtered_bcs',
        'vdj_total_raw_read_pairs_per_filtered_bc',
        'vdj_assemblable_read_pairs_per_filtered_bc',
        'vdj_filtered_bcs_cum_frac',
    ]

    chart = {
        'layout': {
            'title': 'Barcode Rank',
            'width': 470,
            'height': 313,
            'margin': {'l': 60, 'r': 0, 't': 30, 'b': 40},
            'hovermode': 'closest',
            'xaxis': {
                'title': 'Barcodes',
                'type': 'log',
                'fixedrange': False,
                "showline": True,
            },
            'yaxis': {
                'title': 'UMI counts',
                'type': 'log',
                'fixedrange': False,
                "showline": True,
            },
        },
        'data': [
            {
                'x': [],
                'y': [],
                'name': 'Cells',
                'hoverinfo': 'name',
                'type': 'scattergl',
                'mode': 'lines',
                'line': {
                    'color': shared.BC_PLOT_CMAP(1.0),
                    'width': shared.BC_RANK_PLOT_LINE_WIDTH,
                },
            },
            {
                'x': [],
                'y': [],
                'name': 'Background',
                'hoverinfo': 'name',
                'type': 'scattergl',
                'mode': 'lines',
                'line': {
                    'color': shared.BC_PLOT_CMAP(0.0),
                    'width': shared.BC_RANK_PLOT_LINE_WIDTH,
                },
            },
        ],
        'config': {
            "staticPlot": False,
            "displayModeBar": True,
            "modeBarButtons": [["toImage", "resetScale2d"]],
            "dragmode": "zoom",
            "showAxisDragHandles": True,
            "scrollZoom": False,
        },
    }


    data_dict = create_table_with_alarms("cells", "Cells",
                                    VDJ_CELL_CALL_KEYS, VDJ_CELL_CALL_KEYS,
                                    metadata, sample_data)

    barcode_rank_plot = cr_webshim.plot_vdj_barcode_rank(chart, sample_properties, sample_data)
    if barcode_rank_plot:
        data_dict["cells"]['barcode_knee_plot'] = barcode_rank_plot
        data_dict["cells"]['help']['data'] = VDJ_RANK_PLOT_HELP + data_dict["cells"]['help']['data']

    return data_dict


def vdj_clonotype_table(sample_data):
    """
    Inputs:
        - sample_data: webshim.data.SampleData object with the clonotype summary populated
    Return:
        - Dictionary that will populate the table containing top 10 clonotypes
        in the analysis tab
    """
    assert sample_data.vdj_clonotype_summary is not None
    table_heading = ["Clonotype ID", "CDR3s", "Frequency", "Proportion"]
    table_help = {
        "title": "Top 10 Clonotype CDR3 Sequences",
        "data": [
            [
                "",
                [
                    'Top 10 clonotypes by frequency in this sample. A clonotype is defined as a \
                        unique set of CDR3 nucleotide sequences. For the full table and more details, \
                            please refer to the "clonotypes.csv" and "consensus_annotations.csv" files \
                                produced by the pipeline.',
                ],
            ],
        ],
    }
    table_rows = []
    for _, row in sample_data.vdj_clonotype_summary.iloc[0:10].iterrows():
        table_rows.append([
            row['clonotype_id'].replace('clonotype', ''),
            row['cdr3s_aa'].replace(';', '<br>'),
            '{}'.format(row['frequency']),
            '{:.2%}'.format(row['proportion'])
        ])
    result = {
        "help": table_help,
        "table": {
            "header": table_heading,
            "rows": table_rows
        }
    }
    return result


def vdj_clonotype_chart(sample_properties, sample_data):
    """
    Inputs:
        - sample_properties: webshim.constants.vdj.VdjSampleProperties
        - sample_data: webshim.data.SampleData object with the clonotype summary populated
    Return:
        - Dictionary that will be used to plot the clonotype histogram in
        the analysis tab
    """
    assert sample_data.vdj_clonotype_summary is not None
    chart = {
        'layout': {
            'showlegend': False,
            'xaxis': {
                'type': 'category',
                'title': 'Clonotype ID',
            },
            'yaxis': {
                'title': 'Fraction of Cells',
            },
            'margin': {'l': 60, 't': 0, 'r': 40},
            'hovermode': 'closest',
        },
        'data': [{'type': 'bar'}],
        'config': {
            "staticPlot": False,
            "displayModeBar": True,
            "modeBarButtons": [["toImage"]],
            "dragmode": "zoom",
        },
    }

    x = []
    y = []
    for _, row in sample_data.vdj_clonotype_summary.iloc[0:10].iterrows():
        x.append(row['clonotype_id'].replace('clonotype', ''))
        y.append(row['proportion'])

    chart['data'][0]['x'] = x
    chart['data'][0]['y'] = y

    result = {
        "help": {
            "helpText": 'Top 10 clonotypes by frequency in this sample. A clonotype is \
                defined as a unique set of CDR3 nucleotide sequences. For the full table \
                    and more details, please refer to the "clonotypes.csv" and \
                        "consensus_annotations.csv" files produced by the pipeline.',
            "title": "Top 10 Clonotype Frequencies",
        },
        "plot": chart,
    }
    return result


def vdj_summary_tab(metadata, sample_properties, sample_data):
    """
    Inputs:
        - metadata: VdjMetricAnnotation object
        - sample_properties: webshim.constants.vdj.VdjSampleProperties
        - sample_data: webshim.data.SampleData object
    Return:
        - Dictionary that defines the contents in the "Summary" tab
        - Alarms that need to be raised
    """
    CHAIN_TYPE_KEY = "chain_type"
    alarm_list = []
    summary_tab_json = {}
    add_data(summary_tab_json, alarm_list, pipeline_info_table(
        sample_data, sample_properties, PIPELINE_VDJ))
    if sample_data.summary.get(REFERENCE_GENOME_KEY, None):
        add_data(summary_tab_json, alarm_list, vdj_enrichment_table(
            metadata, sample_data, chain_type=sample_properties[CHAIN_TYPE_KEY]))
        add_data(summary_tab_json, alarm_list, vdj_expression_table(
            metadata, sample_data, chain_type=sample_properties[CHAIN_TYPE_KEY]))
        add_data(summary_tab_json, alarm_list, vdj_annotation_table(
            metadata, sample_data, chain_type=sample_properties[CHAIN_TYPE_KEY]))
    add_data(summary_tab_json, alarm_list, vdj_cell_call_table(
        metadata, sample_properties, sample_data))
    add_data(summary_tab_json, alarm_list,
             vdj_sequencing_table(metadata, sample_data))
    add_data(summary_tab_json, alarm_list,
             vdj_hero_metrics(metadata, sample_data))


    alarm_dict = {
        'alarms': alarm_list
    }

    return summary_tab_json, alarm_dict


def vdj_analysis_tab(sample_properties, sample_data):
    """
    Inputs:
        - sample_properties: webshim.constants.vdj.VdjSampleProperties
        - sample_data: webshim.data.SampleData object
    Return:
        - Dictionary that defines the contents in the "Analysis" tab
    """
    if sample_data.vdj_clonotype_summary is None:
        return None

    return {
        "vdj_clonotype": vdj_clonotype_table(sample_data),
        "vdj_clonotype_hist": vdj_clonotype_chart(sample_properties, sample_data),
    }


def vdj_web_summary_json(metadata, sample_properties, sample_data):
    """
    Inputs:
        - metadata: VdjMetricAnnotation object
        - sample_properties: webshim.constants.vdj.VdjSampleProperties
        - sample_data: webshim.data.SampleData object
    Return:
        - Dictionary that is used to generate the web summary
    """
    summary_tab_json, alarms_json = vdj_summary_tab(
        metadata, sample_properties, sample_data)
    result = {
        'alarms': alarms_json,
        'sample': {
            'id': sample_properties['sample_id'],
            'description': sample_properties['sample_desc'],
            'command': 'Cell Ranger',
            'subcommand': PIPELINE_VDJ,
        },
        'summary_tab': summary_tab_json,
    }
    analysis_tab_json = vdj_analysis_tab(sample_properties, sample_data)
    if analysis_tab_json:
        result['vdj_analysis_tab'] = analysis_tab_json
    return result


def build_vdj_web_summary_html(filename, sample_properties, sample_data):
    """
    Inputs:
        - filename: File to write the web summary html to
        - sample_properties: webshim.constants.vdj.VdjSampleProperties
        - sample_data: webshim.data.SampleData object
    Return:
        - Dictionary that is used to generate the web summary
    """

    metadata = VDJMetricAnnotations()
    websummary_data = vdj_web_summary_json(
        metadata, sample_properties, sample_data)
    # TODO: This part should also be a function to write web summary from json
    contents = """<div data-key="summary" data-component="CellRangerSummary">"""
    with open(filename, 'w') as outfile:
        summarize.generate_html_summary(
            {'summary': websummary_data}, contents, None, outfile)

    return
