#!/usr/bin/perl -w
###All right reserved
###Author: lyk
###Updated 2017/8/21
#
use List::Util qw(first max maxstr min minstr reduce shuffle sum);
use Math::Round;
use Statistics::R;


my $minDiffPer = 0.05;
my $SJOverhangMin = 6;
my $readCountMin  = 20;
my $list_path = './sample_list2';
my $gtf_path  = './TMEM138.gtf';
my $out_merge_path = './merge.gtf';
my $out_splice_path = './Splicing_event.txt';

($list_path,$gtf_path) = @ARGV;
#######Global parameter;

#######R Commands
my $cmds = <<EOF;
alle=matrix(x,nrow=2)
pvalue=chisq.test(alle)\$p.value
EOF
######End R Commands

# Create a communication bridge with R and start R
my $R = Statistics::R->new();

#########I/O File
open FILE, "awk '(\$1 !~ /^\#/ && \$2 != \"havana\"){print}' $gtf_path |";
open MERGE, '>',$out_merge_path;
open SPL,">Splicing.tsv";
open OUT,'>',$out_splice_path;
print OUT "gene_id\tgene_name\tchromosome\tstrand\tsplicingType\tfixExonInfo\tpercentDiff\tpvalue\tqvalue\talterExonInfo\n";

#######Read the sample information
open SAMPLE,$list_path;
my %sample;
my @sample;
my %con_count;
while(<SAMPLE>){
	chomp;
	my ($sample,$condition) = split;
	$sample{$sample} = $condition;
	$con_count{$condition}++;
	push @sample,$sample;
}
my @condition = keys %con_count;
print SPL "Junction\t",join( "\t",@sample),"\n";


######Read the gene information
my %gene;
while(<FILE>){
	chomp;
	my ($chr,$source,$feature,$str,$end,$score,$strand,$frame,$attribute) = split /\t/;
	my %attr;
	foreach (split /;/,$attribute){
		my ($key,$val) = split;
		$val =~ s/\;|\"//g;
		$attr{$key} = $val;
	}
	if($feature eq "exon"){
		if(exists $gene{$attr{'gene_id'}}){
			push @{$gene{$attr{'gene_id'}}{'merge'}}, ($str..$end);
		}
		else{
			%{$gene{$attr{'gene_id'}}} = ('chr'=>$chr,'source'=>$source,'merge'=>[$str..$end],'strand'=>$strand,'gene_name'=>$attr{'gene_name'});
		}
	}
}


my @gene = keys %gene;
for my $i (0..$#gene){
	my $gene_id = $gene[$i];
	my $val = $gene{$gene_id};
	my @merge = @{$val->{'merge'}};
	my %hash;
	@merge = grep { ++$hash{$_} < 2 } @merge;
	my ($chr,$source,$strand,$gene_name) = ($val->{'chr'},$val->{'source'},$val->{'strand'},$val->{'gene_name'});
	if ($chr !~ /^chr/){
		$chr = "chr$chr";
	}
	if ($chr eq "chrMT"){
		$chr = "chrM";
	}

	my $junc_ref;
	my $anno_ref;
	if($strand eq "+"){
		@merge = sort{$a<=>$b} @merge;
		my $exon_num = 1;
		my @exon5p;
		my @exon3p;
		######Print the gene lines
		push @exon5p,$merge[0];
		print MERGE "$chr\t$source\_MERGE\tgene\t$merge[0]\t$merge[-1]\t.\t$strand\t.\tgene_id \"$gene_id\"; gene_name \"$gene_name\";\n";
		print MERGE "$chr\t$source\_MERGE\texon\t$merge[0]\t";
		for(my $i=1;$i<@merge;$i++){
			if($merge[$i]-$merge[$i-1]>1){
				push @exon3p, $merge[$i-1];
				print MERGE "$merge[$i-1]\t.\t$strand\t.\tgene_id \"$gene_id\"; exon_number \"$exon_num\"; gene_name \"$gene_name\";\n";
				push @exon5p, $merge[$i];
				print MERGE "$chr\t$source\_MERGE\texon\t$merge[$i]\t";
				$exon_num++;
			}
		}
		push @exon3p, $merge[-1];
		print MERGE "$merge[-1]\t.\t$strand\t.\tgene_id \"$gene_id\"; exon_number \"$exon_num\"; gene_name \"$gene_name\";\n";
		($junc_ref) = &junction($chr,$merge[0],$merge[-1],83,163,\@sample);
		($anno_ref,$dpsi_ref,$pval_ref) = &annoExon($junc_ref,\@exon5p,\@exon3p);
		foreach my $junc1 (sort (keys %$anno_ref)){
			my $info = $anno_ref->{$junc1};
			printf OUT ("%s\t%s\t%s\t%s\t%s\t%.3f\t%s\t%s\t",$gene_id,$gene_name,$chr,$strand,$junc1,$dpsi_ref->{$junc1},$pval_ref->{$junc1},0);
			foreach my $k (sort (keys %$info)){
				my $v = $info->{$k};
				printf OUT ("%s, %d|%d, %.3f|%.3f; ", $k,$v->{'count'}->{$condition[0]},$v->{'count'}->{$condition[1]},$v->{'percent'}->{$condition[0]},$v->{'percent'}->{$condition[1]});
			}
			print OUT "\n";
		}
	}


	else{
		@merge = sort{$b<=>$a} @merge;
		######Print the gene lines
		print MERGE "$chr\t$source\_MERGE\tgene\t$merge[0]\t$merge[-1]\t.\t$strand\t.\tgene_id \"$gene_id\"; gene_name \"$gene_name\";\n";
		print MERGE "$chr\t$source\_MERGE\texon\t$merge[0]\t";
		my $exon_num = 1;
		for(my $i=1;$i<@merge;$i++){
			if($merge[$i]-$merge[$i-1]<-1){
				print MERGE "$merge[$i-1]\t.\t$strand\t.\tgene_id \"$gene_id\"; exon_number \"$exon_num\"; gene_name \"$gene_name\";\n";
				print MERGE "$chr\t$source\_MERGE\texon\t$merge[$i]\t";
				$exon_num++;
			}
		}
		print MERGE "$merge[-1]\t.\t$strand\t.\tgene_id \"$gene_id\"; exon_number \"$exon_num\"; gene_name \"$gene_name\";\n";
		($junc_ref) = &junction($chr,$merge[-1],$merge[0],99,147,\@sample);
	}
}


sub annoExon{
	my ($junc_ref,$exon5p,$exon3p) = @_;
	my %alter;   ####return value;
	my %deltapsi;####return value;
	my %pvalue;	 ####return value;
	my %sum;
	while (my ($key,$val) = each %$junc_ref){
		my ($end3p,$str5p) = split /\-/,$key;
		my ($junc3p,$junc5p,$exon_num3p,$exon_num5p);
		for my $i (0..$#{$exon5p}){
			if($end3p < $exon5p->[$i]){
				$shift3p = $end3p - $exon3p->[$i-1];
				$exon_num3p = $i;
				last;
			}
		}
		last if (!defined $exon_num3p);
		my $j = ($exon_num3p-1>0) ? $exon_num3p-1 : 0;
		for my $i ($j..$#{$exon3p}){
			if($str5p < $exon3p->[$i]){
				$shift5p = $str5p - $exon5p->[$i];
				$exon_num5p = $i+1;
				last;
			}
		}
		last if (!defined $exon_num5p);
		if($exon_num3p ne $exon_num5p){
			$alter{"alter5pJunc\t$end3p:exon$exon_num3p:$shift3p"}->{"$str5p:exon$exon_num5p:$shift5p"}->{'count'} = $val;
			$alter{"alter3pJunc\t$str5p:exon$exon_num5p:$shift5p"}->{"$end3p:exon$exon_num3p:$shift3p"}->{'count'} = $val;
			$sum{"alter5pJunc\t$end3p:exon$exon_num3p:$shift3p"}->{$condition[0]} += $val->{$condition[0]};
			$sum{"alter5pJunc\t$end3p:exon$exon_num3p:$shift3p"}->{$condition[1]} += $val->{$condition[1]};
			$sum{"alter3pJunc\t$str5p:exon$exon_num5p:$shift5p"}->{$condition[0]} += $val->{$condition[0]};
			$sum{"alter3pJunc\t$str5p:exon$exon_num5p:$shift5p"}->{$condition[1]} += $val->{$condition[1]};
		}
		else{
			$alter{"exonRetention\t$end3p:exon$exon_num3p:$shift3p"}->{"$str5p:exon$exon_num5p:$shift5p"}->{'count'} = $val;
			#$sum{"exonRetention\t$end3p:exon$exon_num3p:$shift3p"}->{$condition[0]} += $val->{$condition[0]};
			#$sum{"exonRetention\t$end3p:exon$exon_num3p:$shift3p"}->{$condition[1]} += $val->{$condition[1]};
		}
	}


	while (my ($key,$val) = each %alter){
		my @count;
		my @junc_num = keys %$val;
		if(@junc_num >1){
			while(my ($junc,$val2) = each %$val){
				#####Global variable @condition;
				my $count0 = $val2->{'count'}->{$condition[0]};
				my $count1 = $val2->{'count'}->{$condition[1]};
				push @count, $count0,$count1;
				my $psi0 = ($sum{$key}->{$condition[0]} == 0) ? 1/@junc_num : $count0/$sum{$key}->{$condition[0]};
				my $psi1 = ($sum{$key}->{$condition[1]} == 0) ? 1/@junc_num : $count1/$sum{$key}->{$condition[1]};
				$val2->{'percent'}->{$condition[0]} = $psi0;
				$val2->{'percent'}->{$condition[1]} = $psi1;
				$deltapsi{$key} += abs($psi0-$psi1);
			}

			$deltapsi{$key} /=2;    #####Set the largest value to 100%;

			$R->set( 'x', \@count );####set the value in R
			$R->run($cmds);			####calculate the pvalue in R
			$pvalue{$key} = $R->get('pvalue');	####get the pvalue from R
		}
		elsif($key =~ /^exonRetention/){
			my $exon_num = (split /\:/,$key)[1];
			my $key2 = $junc_num[0];
			my $count0 = $val->{$key2}->{'count'}->{$condition[0]};
			my $count1 = $val->{$key2}->{'count'}->{$condition[1]};
			my ($sum0,$sum1) =(0,0);
			my ($i,$j) = (0,0);
			while(my ($k,$v) = each %sum){
				if($k =~ /alter5p.*$exon_num/){
					$sum0 += $sum{$k}->{$condition[0]};
					$sum1 += $sum{$k}->{$condition[1]};
					$i++;
				}elsif($k =~ /alter3p.*$exon_num/){
					$sum0 += $sum{$k}->{$condition[0]};
					$sum1 += $sum{$k}->{$condition[1]};
					$j++;
				}
			}

			if($i >0 && $j >0){
				$sum0 /=2;
				$sum1 /=2;
			}
			my $psi0 = $count0/$sum0;  ###### because the sum of junction counts are from two sides.
			my $psi1 = $count1/$sum1;
			$val->{$key2}->{'percent'}->{$condition[0]} = $psi0;
			$val->{$key2}->{'percent'}->{$condition[1]} = $psi1;
			$deltapsi{$key} = abs($psi0-$psi1);

			if($sum0-$count0>0 && $sum1-$count1>0){
				push @count, $count0,$count1,$sum0-$count0,$sum1-$count1;
			}else{
				push @count,$count0,$count1,$sum0,$sum1;
			}

			$R->set( 'x', \@count );####set the value in R
			$R->run($cmds);			####calculate the pvalue in R
			$pvalue{$key} = $R->get('pvalue');	####get the pvalue from R
		}
		else{
			delete $alter{$key};
		}

	}
	return (\%alter,\%deltapsi,\%pvalue);
}



sub junction{
	my ($chr,$str,$end,$flag1,$flag2,$sample_ref) = @_;
	my @sample = @$sample_ref;
	my %junc;
	my %sum_sj;
	my %ave_junc;  ###return value;
	for(my $i=0;$i<@sample;$i++){
		open BAM, "samtools view -q 255 $sample[$i] $chr:$str-$end | awk '(\$6 ~ \"N\" && (\$2 == $flag1 || \$2 == $flag2) && \$6 !~ \"S\" && \$6 !~ \"D\" && \$6 !~ \"I\"){print \$4,\$6}' | ";
		while(<BAM>){
			my ($str,$CIGAR) = split;
			my ($exon1,$exon2,$exon3,$str2,$str3,$end1,$end2,$end3);
			my @info = split /N|M/,$CIGAR;
			if(@info == 3){
				if($info[0] >=$SJOverhangMin && $info[2] >=$SJOverhangMin){
					$end1 = $str+$info[0]-1;  ####
					$str2 = $end1+$info[1]+1;
					$junc{"$end1-$str2"}->[$i]++;
					$sum_sj[$i]++;
				}
			}
			elsif(@info == 5){
				if($info[0] >=$SJOverhangMin && $info[2] >=$SJOverhangMin && $info[4] >=$SJOverhangMin){
					$end1 = $str+$info[0]-1;
					$str2 = $end1+$info[1]+1;
					$end2 = $str2+$info[2]-1;
					$str3 = $end2+$info[3]+1;
					$junc{"$end1-$str2"}->[$i]++;
					$junc{"$end2-$str3"}->[$i]++;
					$sum_sj[$i] +=2;
				}
			}

		}

	}

	open SPL,">>Splicing.tsv";

	if(@sum_sj>0){
		my @size_factor;
		my $average = sum(@sum_sj)/@sum_sj;
		for my $i (0..$#sample){
			$size_factor[$i] = $average/$sum_sj[$i];
		}
		foreach my $key (sort (keys %junc)){
			my %sum;
			my $zeroCount = 0;
			my $total_sum = 0;
			for my $i (0..$#sample){
				if(!defined ($junc{$key}->[$i])){
					$junc{$key}->[$i] = 0;
					$zeroCount++;
				}
				else{
					$junc{$key}->[$i] = $junc{$key}->[$i]*$size_factor[$i];
				}
				$sum{$sample{$sample[$i]}} += $junc{$key}->[$i];
				$total_sum += $junc{$key}->[$i];
			}

			next if ($total_sum < $readCountMin*@sample || $zeroCount > @sample/2);  ####Filtering
			while(my ($k,$v) = each %sum){
				$ave_junc{$key}->{$k} = round($v/$con_count{$k});
			}
			print SPL "$key\t";
			for my $i (0..$#sample){
				print SPL "$junc{$key}->[$i]\t";
			}
			print SPL "\n";
		}
	}
	return (\%ave_junc);
}
