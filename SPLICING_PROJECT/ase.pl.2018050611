#!/usr/bin/perl -w
###All right reserved
###Author: lyk
###Updated 2017/8/21
#
use List::Util qw(first max maxstr min minstr reduce shuffle sum);
use Math::Round;
use Statistics::R;


print scalar localtime,"\n";
#######Default argument value;
my $SJOverhangMin = 3;
my $readCountMin  = 10;
my $mapq          = 30;
my $libType = ("fr-unstranded");
my $list_path = '';
my $gtf_path  = '';
my $out_dir = './';

##########Initial the global value;
my %sample;
my @sample;
my @size_factor;
my %con_count;
my @condition;
my %gene;
my @gene;
my ($flag1,$flag2) = (0,0);

#####SET the parameter
&setArgv;

my $out_merge_path = $out_dir.'Merge_transcripts.gtf';
my $out_splice_path = $out_dir.'ASEvent.tsv';
my $out_junc_path   = $out_dir.'Junction.tsv';



#######R Commands
my $cmds = <<EOF;
alle=matrix(x,nrow=2)
pvalue=chisq.test(alle)\$p.value
EOF


my $qval_cmds = <<EOF;
library(qvalue)
pdf("Qobj_pvalue.pdf")
table <- read.csv("$out_splice_path",header=TRUE,sep="\t",check.names=FALSE)
qobj <- qvalue(p = table\$pvalue)
plot(qobj)
qvalue <- qobj\$qvalues
table\$qvalue<-as.numeric(qvalue)
hist(table\$qvalue, breaks=1000, col="skyblue", border="slateblue", main="qvalue")
write.table(table,"$out_splice_path",quote = FALSE,row.names=FALSE,col.names=TRUE,sep="\t", qmethod = "escape")
EOF

######End R Commands

# Create a communication bridge with R and start R
my $R = Statistics::R->new();


######Set the global argument value;
#######Read the sample information
open SAMPLE,$list_path or die "Failed to open sample list file $list_path: No such file or directory. Exiting";
my @readCount;
my $total = 0;
my $i=0;

print "Normalizing Sequence Deep...\n";

while(<SAMPLE>){
	chomp;
	my ($sample,$condition) = split;
	$readCount[$i] = readpipe("samtools view -q $mapq -c $sample");
	$total += $readCount[$i]; 
	$sample{$sample} = $condition;
	$con_count{$condition}++;
	push @sample,$sample;
	$i++;
}

@condition = keys %con_count;
my $average = $total/@readCount;
for(my $i=0;$i<@readCount;$i++){
	$size_factor[$i] = $average/$readCount[$i];
}
print "Sample: @sample\n";
print "sizeFactor: @size_factor\n";

open SPL,'>', $out_junc_path or die "Failed to open junction file $out_junc_path: No such file or directory. Exiting";
print SPL "Junction\t",join( "\t",@sample),"\n";

#########I/O File
open FILE, "awk '(\$1 !~ /^\#|\_/ && \$2 != \"havana\"){print}' $gtf_path |" or die "Failed to open gtf file $gtf_path: No such file or directory. Exiting";
open MERGE, '>',$out_merge_path or die "Failed to open merge transcripts file $out_merge_path: No such file or directory. Exiting";
open OUT,'>',$out_splice_path or die "Failed to alternative splicing file $out_splice_path: No such file or directory. Exiting";
print OUT "gene_id\tgene_name\tchromosome\tstrand\tsplicingType\tfixSplicingSite\tpercentDiff\tpvalue\tqvalue\talterSplicingSite, readCount($condition[0]|$condition[1]), percentage($condition[0]|$condition[1])\n";



print scalar localtime,"\n";
print "Merge transcripts...\n";
######Read the gene information
while(<FILE>){
	chomp;
	my ($chr,$source,$feature,$str,$end,$score,$strand,$frame,$attribute) = split /\t/;
	my %attr;
	foreach (split /;/,$attribute){
		my ($key,$val) = split;
		$val =~ s/\;|\"//g;
		$attr{$key} = $val;
	}
	if($feature eq "exon"){
		if(exists $gene{$attr{'gene_id'}}){
			push @{$gene{$attr{'gene_id'}}{'merge'}}, ($str..$end);
		}
		else{
			%{$gene{$attr{'gene_id'}}} = ('chr'=>$chr,'source'=>$source,'merge'=>[$str..$end],'strand'=>$strand,'gene_name'=>$attr{'gene_name'});
		}
	}
}


@gene = keys %gene;

print scalar localtime,"\n";
print "ASE Calculating...\n";
for my $i (0..$#gene){
	my $gene_id = $gene[$i];
	my $val = $gene{$gene_id};
	my @merge = @{$val->{'merge'}};
	my %hash;
	@merge = grep { ++$hash{$_} < 2 } @merge;
	my ($chr,$source,$strand,$gene_name) = ($val->{'chr'},$val->{'source'},$val->{'strand'},$val->{'gene_name'});
	if ($chr !~ /^chr/){
		$chr = "chr$chr";
	}
	if ($chr eq "chrMT"){
		$chr = "chrM";
	}

	my ($junc_ref,$anno_ref,$dpsi_ref,$pval_ref);
	if($strand eq "+"){
		if($libType eq "fr-secondstrand"){
			($flag1,$flag2) = (99,147);
		}
		elsif($libType eq "fr-firststrand"){
			($flag1,$flag2) = (83,163);
		}


		@merge = sort{$a<=>$b} @merge;
		my $exon_num = 1;
		my @exon5p;
		my @exon3p;
		push @exon5p,$merge[0];
		######Print the gene lines
		print MERGE "$chr\t$source\_MERGE\tgene\t$merge[0]\t$merge[-1]\t.\t$strand\t.\tgene_id \"$gene_id\"; gene_name \"$gene_name\";\n";
		my $exonStr = $merge[0];
		for(my $i=1;$i<@merge;$i++){
			if($merge[$i]-$merge[$i-1]>1){
				push @exon3p, $merge[$i-1];
				push @exon5p, $merge[$i];
				print MERGE "$chr\t$source\_MERGE\texon\t$exonStr\t$merge[$i-1]\t.\t$strand\t.\tgene_id \"$gene_id\"; exon_number \"$exon_num\"; gene_name \"$gene_name\";\n";
				$exonStr = $merge[$i];
				$exon_num++;
			}
		}
		push @exon3p, $merge[-1];
		print MERGE "$chr\t$source\_MERGE\texon\t$exonStr\t$merge[-1]\t.\t$strand\t.\tgene_id \"$gene_id\"; exon_number \"$exon_num\"; gene_name \"$gene_name\";\n";
		($junc_ref) = &junction($chr,$merge[0],$merge[-1]);
		($anno_ref,$dpsi_ref,$pval_ref) = &annoExon($junc_ref,\@exon5p,\@exon3p,$chr);
	}

	else{
		if($libType eq "fr-secondstrand"){
			($flag1,$flag2) = (83,163);
		}
		elsif($libType eq "fr-firststrand"){
			($flag1,$flag2) = (99,147);
		}


		@merge = sort{$b<=>$a} @merge;
		my $exon_num = 1;
		my @exon5p;
		my @exon3p;
		push @exon5p,$merge[0];
		######Print the gene lines
		print MERGE "$chr\t$source\_MERGE\tgene\t$merge[0]\t$merge[-1]\t.\t$strand\t.\tgene_id \"$gene_id\"; gene_name \"$gene_name\";\n";
		my $exonEnd = $merge[0];
		for(my $i=1;$i<@merge;$i++){
			if($merge[$i]-$merge[$i-1]<-1){
				push @exon3p, $merge[$i-1];
				push @exon5p, $merge[$i];
				print MERGE "$chr\t$source\_MERGE\texon\t$merge[$i-1]\t$exonEnd\t.\t$strand\t.\tgene_id \"$gene_id\"; exon_number \"$exon_num\"; gene_name \"$gene_name\";\n";
				$exonEnd = $merge[$i];
				$exon_num++;
			}
		}
		push @exon3p, $merge[-1];
		print MERGE "$chr\t$source\_MERGE\texon\t$merge[-1]\t$exonEnd\t.\t$strand\t.\tgene_id \"$gene_id\"; exon_number \"$exon_num\"; gene_name \"$gene_name\";\n";
		($junc_ref) = &junction($chr,$merge[-1],$merge[0]);
		($anno_ref,$dpsi_ref,$pval_ref) = &annoExon2($junc_ref,\@exon5p,\@exon3p,$chr);
	}

	foreach my $junc1 (sort (keys %$anno_ref)){
		my $info = $anno_ref->{$junc1};
		printf OUT ("%s\t%s\t%s\t%s\t%s\t%.3f\t%s\t%s\t",$gene_id,$gene_name,$chr,$strand,$junc1,$dpsi_ref->{$junc1},$pval_ref->{$junc1},0);
		foreach my $k (sort (keys %$info)){
			my $v = $info->{$k};
			printf OUT ("%s, %d|%d, %.3f|%.3f; ", $k,$v->{'count'}->{$condition[0]},$v->{'count'}->{$condition[1]},$v->{'percent'}->{$condition[0]},$v->{'percent'}->{$condition[1]});
		}
		print OUT "\n";
	}
}



print scalar localtime,"\n";
print "Qvalue Calculating...\n";
$R->run($qval_cmds);			####calculate the qvalue in R


sub annoExon2{
	my ($junc_ref,$exon5p,$exon3p,$chr) = @_;
	my %alter;   ####return value;
	my %sum;
	my %retention;
	while (my ($key,$val) = each %$junc_ref){
		my ($str5p,$end3p) = split /\-/,$key;
		my $max_index = $#{$exon5p};
		my ($exon_num3p,$exon_num5p) = ($max_index+1,1);
		my ($shift3p,$shift5p)       = ($end3p - $exon3p->[-1],$str5p-$exon5p->[0]);
		for my $i (0..$max_index){
			if($end3p > $exon5p->[$i]){
				$shift3p = ($i-1>=0) ? $end3p-$exon3p->[$i-1] : "";
				$exon_num3p = $i;
				last;
			}
		}

		for(my $i=$max_index;$i>=0;$i--){
			if($str5p < $exon3p->[$i]){
				$shift5p = ($i+1<=$max_index) ? $str5p-$exon5p->[$i+1] : "";
				$exon_num5p = ($i+1<=$max_index) ? $i+2 : -1;
				last;
			}
		}

		my $junc3c = "$end3p:exon$exon_num3p:$shift3p";
		my $junc5c = "$str5p:exon$exon_num5p:$shift5p";
		if($exon_num3p ne $exon_num5p){
			$alter{"alter5pJunc\t$junc3c"}->{$junc5c}->{'count'} = $val;
			$alter{"alter3pJunc\t$junc5c"}->{$junc3c}->{'count'} = $val;
			$sum{"alter5pJunc\t$junc3c"}->{$condition[0]} += $val->{$condition[0]};
			$sum{"alter5pJunc\t$junc3c"}->{$condition[1]} += $val->{$condition[1]};
			$sum{"alter3pJunc\t$junc5c"}->{$condition[0]} += $val->{$condition[0]};
			$sum{"alter3pJunc\t$junc5c"}->{$condition[1]} += $val->{$condition[1]};
		}
		else{
			$retention{"exonRetention\texon$exon_num3p"}->{"$junc3c->$junc5c"}->{'count'} = $val;
		}
	}

	my ($alter_r,$deltapsi_r,$pvalue_r) = &stat(\%alter,\%sum);
	($alter_r,$deltapsi_r,$pvalue_r) = &stat_retention(\%retention,$chr,$alter_r,$deltapsi_r,$pvalue_r);
	return ($alter_r,$deltapsi_r,$pvalue_r);
}


sub annoExon{
	my ($junc_ref,$exon5p,$exon3p,$chr,$flag1,$flag2) = @_;
	my %alter;   ####return value;
	my %sum;
	my %retention;
	while (my ($key,$val) = each %$junc_ref){
		my ($end3p,$str5p) = split /\-/,$key;
		my $max_index = $#{$exon5p};
		my ($exon_num3p,$exon_num5p) = ($max_index+1,1);
		my ($shift3p,$shift5p)       = ($end3p - $exon3p->[-1],$str5p-$exon5p->[0]);
		for my $i (0..$max_index){
			if($end3p < $exon5p->[$i]){
				$shift3p = ($i-1>=0) ? $end3p-$exon3p->[$i-1] : "";
				$exon_num3p = $i;
				last;
			}
		}

		for(my $i=$max_index;$i>=0;$i--){
			if($str5p > $exon3p->[$i]){
				$shift5p = ($i+1<=$max_index) ? $str5p-$exon5p->[$i+1] : "";
				$exon_num5p = ($i+1<=$max_index) ? $i+2 : -1;
				last;
			}
		}

		my $junc3c = "$end3p:exon$exon_num3p:$shift3p";
		my $junc5c = "$str5p:exon$exon_num5p:$shift5p";
		if($exon_num3p ne $exon_num5p){
			$alter{"alter5pJunc\t$junc3c"}->{$junc5c}->{'count'} = $val;
			$alter{"alter3pJunc\t$junc5c"}->{$junc3c}->{'count'} = $val;
			$sum{"alter5pJunc\t$junc3c"}->{$condition[0]} += $val->{$condition[0]};
			$sum{"alter5pJunc\t$junc3c"}->{$condition[1]} += $val->{$condition[1]};
			$sum{"alter3pJunc\t$junc5c"}->{$condition[0]} += $val->{$condition[0]};
			$sum{"alter3pJunc\t$junc5c"}->{$condition[1]} += $val->{$condition[1]};
		}
		else{
			$retention{"exonRetention\texon$exon_num3p"}->{"$junc3c->$junc5c"}->{'count'} = $val;
		}
	}

	my ($alter_r,$deltapsi_r,$pvalue_r) = &stat(\%alter,\%sum);
	($alter_r,$deltapsi_r,$pvalue_r) = &stat_retention(\%retention,$chr,$alter_r,$deltapsi_r,$pvalue_r);
	return ($alter_r,$deltapsi_r,$pvalue_r);
}



sub stat{
	my ($alter,$sum) = @_;
	my %deltapsi;####return value;
	my %pvalue;	 ####return value;

	while (my ($key,$val) = each %$alter){
		my @count;
		my $junc_num = keys %$val;
		if($junc_num >1){
			while(my ($junc,$val2) = each %$val){
				#####Global variable @condition;
				my $count0 = $val2->{'count'}->{$condition[0]};
				my $count1 = $val2->{'count'}->{$condition[1]};
				push @count, $count0,$count1;
				my $psi0 = ($sum->{$key}->{$condition[0]} == 0) ? 1/$junc_num : $count0/$sum->{$key}->{$condition[0]};
				my $psi1 = ($sum->{$key}->{$condition[1]} == 0) ? 1/$junc_num : $count1/$sum->{$key}->{$condition[1]};
				$val2->{'percent'}->{$condition[0]} = $psi0;
				$val2->{'percent'}->{$condition[1]} = $psi1;
				$deltapsi{$key} += abs($psi0-$psi1);
			}

			$deltapsi{$key} /=2;    #####Set the largest value to 100%;

			$R->set( 'x', \@count );####set the value in R
			$R->run($cmds);			####calculate the pvalue in R
			$pvalue{$key} = $R->get('pvalue');	####get the pvalue from R
		}
		else{
			delete $alter->{$key};
		}

	}
	return ($alter,\%deltapsi,\%pvalue);
}


sub stat_retention{
	my ($retention_r,$chr,$alter_r,$deltapsi_r,$pvalue_r) = @_;
	while(my ($key,$val) = each %$retention_r){
		my @sum;
		my %reten_count;
		my $reten_num = 0;
		my @count;
		my @total;
		while(my ($key2,$val2) = each %$val){
			$reten_num++;
			$total[0] += $val2->{'count'}->{$condition[0]};
			$total[1] += $val2->{'count'}->{$condition[1]};
			my @junc = (split /\:|\-\>/,$key2)[0,3];
			foreach my $junc (@junc){
				my $pos = $junc-$SJOverhangMin+1;    #####The same overhang
				for(my $i=0;$i<@sample;$i++){
					open BAM, "samtools view -q $mapq $sample[$i] $chr:$pos-$pos | awk '(\$6 !~ \"N\" && (\$2 != $flag1 && \$2 != $flag2) && \$6 !~ \"S\" && \$6 !~ \"D\" && \$6 !~ \"I\"){print \$4,\$6}' | ";
					while(<BAM>){
						my ($str,$CIGAR) = split;
						my $readLen = substr($CIGAR,0,-1);
						if($str+$readLen-$junc >= $SJOverhangMin){
							$sum[$i]++;		
						}
					}
				}
			}
		}
		for(my $i=0;$i<@sum;$i++){
			$sum[$i] /= $reten_num*2/$size_factor[$i];
			$reten_count{$sample{$sample[$i]}} += $sum[$i];
		}

		my $j=0;
		foreach my $k (@condition){
			$reten_count{$k} /= $con_count{$k};
			$total[$j] += $reten_count{$k};
			push @count,$reten_count{$k};
			$j++;
		}

		if ($total[0] >0 && $total[1] >0){
			while(my($key2,$val2) = each %$val){
				my $count0 = $val2->{'count'}->{$condition[0]};
				my $count1 = $val2->{'count'}->{$condition[1]};
				push @count, $count0,$count1;
				my $psi0 = $count0/$total[0];
				my $psi1 = $count1/$total[1];
				$alter_r->{$key}->{$key2}->{'count'}->{$condition[0]} = $count0;
				$alter_r->{$key}->{$key2}->{'count'}->{$condition[1]} = $count1;
				$alter_r->{$key}->{$key2}->{'percent'}->{$condition[0]} = $psi0;
				$alter_r->{$key}->{$key2}->{'percent'}->{$condition[1]} = $psi1;
				$deltapsi_r->{$key} += abs($psi0-$psi1);
			}
			$deltapsi_r->{$key} /=2;    #####Set the largest value to 100%;

			$R->set( 'x', \@count );####set the value in R
			$R->run($cmds);			####calculate the pvalue in R
			$pvalue_r->{$key} = $R->get('pvalue');	####get the pvalue from R
		}
	}
	return ($alter_r,$deltapsi_r,$pvalue_r);
}



sub junction{
	my ($chr,$str,$end) = @_;
	my %junc;
	my %ave_junc;  ###return value;

	for(my $i=0;$i<@sample;$i++){
		open BAM, "samtools view -q $mapq $sample[$i] $chr:$str-$end | awk '(\$6 ~ \"N\" && (\$2 != $flag1 && \$2 != $flag2) && \$6 !~ \"S\" && \$6 !~ \"D\" && \$6 !~ \"I\"){print \$4,\$6}' | ";
		while(<BAM>){
			my ($str,$CIGAR) = split;
			my ($exon1,$exon2,$exon3,$str2,$str3,$end1,$end2,$end3);
			my @info = split /N|M/,$CIGAR;
			if(@info == 3){
				if($info[0] >=$SJOverhangMin && $info[2] >=$SJOverhangMin){
					$end1 = $str+$info[0]-1;  ####
					$str2 = $end1+$info[1]+1;
					$junc{"$end1-$str2"}->[$i]++;
				}
			}
			elsif(@info == 5){
				if($info[0] >=$SJOverhangMin && $info[2] >=$SJOverhangMin && $info[4] >=$SJOverhangMin){
					$end1 = $str+$info[0]-1;
					$str2 = $end1+$info[1]+1;
					$end2 = $str2+$info[2]-1;
					$str3 = $end2+$info[3]+1;
					$junc{"$end1-$str2"}->[$i]++;
					$junc{"$end2-$str3"}->[$i]++;
				}
			}

		}

	}

	foreach my $key (sort (keys %junc)){
		my %sum;
		my $zeroCount = 0;
		my $total_sum = 0;
		for my $i (0..$#sample){
			if(!defined ($junc{$key}->[$i])){
				$junc{$key}->[$i] = 0;
				$zeroCount++;
			}
			else{
				$junc{$key}->[$i] *= $size_factor[$i];
			}
			$sum{$sample{$sample[$i]}} += $junc{$key}->[$i];
			$total_sum += $junc{$key}->[$i];
		}

		next if ($total_sum < $readCountMin*@sample || $zeroCount >= @sample/2);  ####Filtering
		while(my ($k,$v) = each %sum){
			$ave_junc{$key}->{$k} = round($v/$con_count{$k});
		}
		print SPL "$chr\t$key";
		for my $i (0..$#sample){
			print SPL "\t$junc{$key}->[$i]";
		}
		print SPL "\n";
	}
	return (\%ave_junc);
}



sub setArgv{
	my %argv;
	for(my $i=0;$i<@ARGV;$i+=2){
		$argv{$ARGV[$i]} = $ARGV[$i+1]; 
	}
	while(my ($key,$val)=each %argv){
		if($key eq "--help"){
			printf ("%s\n\n%s\n  %s\n  %s\n  %s\n  %s\n  %s\n  %s\n  %s\n  %s\n","Usage: ASE.pl [options]","Options:","--help\tshow this help message and exit","--mapq\tDefult: $mapq. Minimum mapping quality (phred scaled) for an alignment to be considered as uniquely mapped","--libType\tDefault: $libType.  Use fr-firststrand or fr-secondstrand for strand-specific data.","--overhangMin\tDefult: $SJOverhangMin. Minimum overhang length for splice junctions on both sides. This value should be equal or greater than used in the aligner","--readCountMin\tDefult: $readCountMin. Minium average splice junctions read count to be considered","--sampleList\ta file listing sorted bam file paths of each sample and its conditon in tab-delimited format in each lines.","--gtf\tAn annotation of genes and transcripts in GTF format","--outDir\tThe output directory");
			exit ;
		}
		elsif($key eq "--libType"){
			if($val ne "fr-unstranded" && $val ne "fr-firststrand" && $val ne "fr-secondstrand"){
				die "Unrecognized libType $val.Default is unstranded (fr-unstranded). Use fr-firststrand or fr-secondstrand for strand-specific data. Exiting";
			}
			$libType = $val;
		}
		elsif($key eq "--outDir"){
			$out_dir = $val;
		}
		elsif($key eq "--gtf"){
			$gtf_path = $val;
		}
		elsif($key eq "--sampleList"){
			$list_path = $val;
		}
		elsif($key eq "--overhangMin"){
			die "$val if not an integer for argument --overhangMin. Exiting" if $val !~ /^\d+$/;
			$SJOverhangMin = $val;
		}
		elsif($key eq "--readCountMin"){
			die "$val if not an integer for argument --readCountMin. Exiting" if $val !~ /^\d+$/;
			$readCountMin = $val;
		}
		elsif($key eq "--mapq"){
			die "$val if not an integer for argument --mapq. Exiting" if $val !~ /^\d+$/;
			$readCountMin = $val;
		}
		else{
			die "Unrecognized argument $key. Exiting";
		}
	}
}
