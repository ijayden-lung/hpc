#!/usr/bin/perl -w
my ($species,$select,$lib,$inp) =@ARGV;

my %name2id;
open ID,"/home/bio-longyk/cnda/ensembl/$species\_ID2Name.txt";
while(<ID>){
	my ($id,$name) = split;
	$name2id{$name} = $id;
}


####https://www.genenames.org/cgi-bin/symbol_checker
my %symbol;
open SYN,"/home/bio-longyk/workspace/CRISPR/Library/symbol_checker_$lib";
<SYN>;
while(<SYN>){
	chomp;
	my ($pre,$new) = (split /\t/)[0,2];
	$symbol{$pre} = $new;
}

my %length;
if($species eq "hg38"){
	open LEN,"/home/bio-longyk/workspace/splicing/colon/DESeq2/FC_annotation.txt";
}
elsif($species eq "mm10"){
	 open LEN,"/home/bio-longyk/workspace/splicing/mouse/DESeq2/FC_annotation.txt";
 }
elsif($species eq "rn6"){
	 open LEN,"/home/bio-longyk/workspace/splicing/rat/DESeq2/FC_annotation.txt";
 }
<LEN>;
while(<LEN>){
	my ($id,$length) = (split)[1,-1];
	$length{$id} = $length;
}

my %bg;
my %n2i;
open LIB,"$inp.gene_summary.txt";
<LIB>;
while(<LIB>){
	chomp;
	my ($gene) = split;
	if(exists $name2id{$gene}){
		my $id = $name2id{$gene};
		$bg{$id} = $gene;
		$n2i{$gene} = $id;
	}
	else{
		my $id = $name2id{$symbol{$gene}};
		$bg{$id} = $gene;
		$n2i{$gene} = $id;
	}
}

open BG,">bg.$inp";
print BG "gene\tlength\n";
while(my ($id,$gene) = each %bg){
	if(exists $length{$id}){
		print BG "$id\t$length{$id}\n";
	}
	else{
		print BG "$id\t1000\n";
		print "$gene\t$id\n";
	}
}

my %go;
my %rank;
open FILE,"$inp.gene_summary.txt";
<FILE>;
while(<FILE>){
	chomp;
	my ($gene,$num,$neg_score,$neg_pval,$neg_fdr,$neg_rank,$neg_good_sgrna,$neg_lfc,$pos_score,$pos_pval,$pos_fdr,$pos_rank,$pos_good_sgrna,$pos_lfc) = split;
	my $pval = $pos_pval;
	my $rank = $pos_rank;
	if($select eq "pos"){
		$rank = $pos_rank;
		$pval = $pos_pval;
	}
	elsif($select eq "neg"){
		$rank = $neg_rank;
		$pval = $neg_pval;
	}
	$rank{$gene} = $rank;
	if($pval < 0.05){
		if(exists $n2i{$gene}){
			$go{$n2i{$gene}} = '';
		}
	}
}


open OUT,">go.$lib.$select.$inp";
print OUT ">ensg\n";
foreach my $key (keys %go){
	print OUT "$key\n";
}

open OUT,">rank.$lib.$select.$inp";
foreach my $key (sort{$rank{$a}<=>$rank{$b}} keys %rank){
	if(exists $symbol{$key}){
		$key = $symbol{$key};
	}
	print OUT "$key\n";
}
