#!/usr/bin/perl 
use List::Util qw(first max maxstr min minstr reduce shuffle sum);
use Math::Round;


print "Start readCount Normalization\n";

#####Processing the sample;
my ($lib,$exp,$dir) = @ARGV;
if(!defined $dir){
	$dir = '.';
}
if(!defined $exp){
	$exp = 'WNTScreen';
}
if(!defined $lib){
	$lib = 'hKO';
}

my %hash;
my %sizeF;
my $total = 0;
my @sample;
my %data;
my %gRNA;
foreach my $file (glob "$dir/OUT/*/gRNA_sorted.txt"){
	open FILE,$file;
	my $sample = (split /\//,$file)[-2];
	while(<FILE>){
		chomp;
		my ($gene,$gRNA,$readNum) = split;
		$gene =~ s/;//g;
		$hash{$sample} += $readNum;
		$data{"$gRNA\t$gene"}->{$sample} = $readNum;
		$total += $readNum;
		$gRNA{"$gRNA\t$gene"} += $readNum;
	}
	push @sample,$sample;
}

my $ave = $total/@sample;
while(my($sample,$val) = each %hash){
	$sizeF{$sample} = $ave/$val;
	print "$sample\t$sizeF{$sample}\n";
}

my %norm;
while(my ($key,$val) = each %data){
	while(my ($sample,$readNum) = each %$val){
		$norm{$key}->{$sample} = $readNum * $sizeF{$sample};
	}
}


open OUT,">RC_$lib\_$exp.tsv";
open OUT2, ">Norm_RC_$lib\_$exp.tsv";
print OUT join "\t",'sgRNA','gene',@sample;
print OUT2 join "\t",'sgRNA','gene',@sample;
foreach my $key (sort{$gRNA{$b} <=> $gRNA{$a}} keys %gRNA){
	next if ($gRNA{$key}/@sample <= 1 || ($key =~ "^NotHits" && $gRNA{$key}/@sample < 10));
	print OUT "\n$key";
	print OUT2 "\n$key";
	foreach my $sample (@sample){
		printf OUT ("\t%d",$data{$key}->{$sample});
		printf OUT2 ("\t%.2f",$norm{$key}->{$sample});
	}
}

print "Finish readCount Normalization\n";
