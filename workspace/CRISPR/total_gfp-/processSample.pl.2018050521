#!/usr/bin/perl 
use List::Util qw(first max maxstr min minstr reduce shuffle sum);
use Math::Round;

#####Processing the sample;
my %hash;
my %sizeF;
my $i = 0;
my $total = 0;

$hash{'GFP+'}->{'GFP+1'} = 1419816;
$hash{'GFP+'}->{'GFP+2'} = 1370008;
$hash{'GFP+'}->{'GFP+3'} = 1411860;
$hash{'GFP-'}->{'GFP-1'} = 3429344;
$hash{'GFP-'}->{'GFP-2'} = 8440236;
$hash{'total'}->{'total1'} = 13790260;
$hash{'total'}->{'total2'} = 10870428;
$hash{'total'}->{'total3'} = 3789228;
$hash{'library'}->{'library'} = 73264140;
my $ave = (1419816+1370008+1411860+3429344+8440236+13790260+10870428+3789228+73264140)/9;
while(my($key,$val) = each %hash){
	while(my($k,$v) = each %$val){
		$sizeF{$k} = $ave/$v;
		print "$key\t$k\t$sizeF{$k}\n";
	}
}



open LIB,'Human_Lib.csv';
<LIB>;
my %lib;
while(<LIB>){
	chomp;
	my ($gene,$target) = (split /,/)[1,3];
	$lib{$target} = $gene;
}

my $lib_num = keys %lib;
print "$lib_num\n";

my %data;
my @sample;
foreach my $key (sort keys %hash){
	my $val = $hash{$key};
	foreach my $k (sort keys %$val){
		my $v = $val->{$k};
		open DATA,"OUT/$k/gRNA_sorted.txt";
		push @sample,$k;
		while(<DATA>){
			chomp;
			my($target,$reads) = split;
			$data{$target}->{$k} = $reads*$sizeF{$k};
		}
	}
}


#######Gene Track#######
my %data2;
foreach my $key (keys %lib){
	if (exists $data{$key} && $key =~ /^G/){
		$val = $data{$key};
	}
	elsif(exists $data{"G$key"}){
		$key = "G$key";
		$val = $data{$key};
	}
	else{next;}
	foreach my $sam (@sample){
		if(exists $val->{$sam}){
			$Target->{$sam}++;
			$TarMapnum->{$sam} +=  $val->{$sam};
			$data2{$key}->{$sam}  = $val->{$sam};
		}
		else{
			$data2{$key}->{$sam}  = 0;
		}
	}
	delete $data{$key};
}
	
while(my($key,$val) = each %data){
	foreach my $sam (@sample){
		if(exists $val->{$sam}){
			$UnTarget->{$sam}++;
			$UnTarMapnum->{$sam} +=  $val->{$sam};
		}
	}
}

open OUT, '>Log_293R.tsv';
print OUT join "\t","",@sample,"\n";
my @row = ("Number of traget in library:","Number of target not in library:","MapNum of target in library:","MapNum of target not in library:","Reads per target in library:","Reads per target not in library:");
print OUT "$row[0]";
foreach my $sam (@sample){
	print OUT "\t$Target->{$sam}";
}
print OUT "\n";
print OUT "$row[1]";
foreach my $sam (@sample){
	print OUT "\t$UnTarget->{$sam}";
}
print OUT "\n";
print OUT "$row[2]";
foreach my $sam (@sample){
	printf OUT ("\t%.0f",$TarMapnum->{$sam});
}
print OUT "\n";
print OUT "$row[3]";
foreach my $sam (@sample){
	printf OUT ("\t%.0f",$UnTarMapnum->{$sam});
}
print OUT "\n";
print OUT "$row[4]";
foreach my $sam (@sample){
	my $per = $TarMapnum->{$sam}/$Target->{$sam};
	printf OUT ("\t%.0f",$per);
}
print OUT "\n";
print OUT "$row[5]";
foreach my $sam (@sample){
	my $per = $UnTarMapnum->{$sam}/$UnTarget->{$sam};
	printf OUT ("\t%.0f",$per);
}
print OUT "\n";
print OUT "size factors:";
foreach my $sam (@sample){
	printf OUT ("\t%.2f",$sizeF{$sam});
}


open FILE, '>mKO_293R.tsv';
print FILE join "\t",'target','gene',@sample,"\n";
my $len20 = 0;
my $len21 = 0;
while(my($key,$val) = each %data2){
	my $sub = substr($key,1);
	if(exists $lib{$key}){
		$len20++;
		next;
		#print FILE "$key\t$lib{$key}";
	}
	elsif(exists $lib{$sub}){
		$len21++;
		print FILE "$key\t$lib{$sub}";
	}
	foreach my $sam (@sample){
		my $read = $val->{$sam};
		print FILE "\t$read";
	}
	print FILE "\n";
}
print "len20:$len20\tlen21:$len21\n";
