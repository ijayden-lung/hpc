#!/usr/bin/perl -w

open FILE,'../GeCKO_whole.tsv';
<FILE>;
my %hash;
my %geneCount;
open OUT,'>GeCKO_FoldChange.tsv';
print OUT "sgRNA\tgene\tmeanh1\tlfch1\tmeanh2\tlfch2\tmeanh3\tlfch3\tmeanh4\tlfch4\tmeanl1\tlfcl1\tmeanl2\tlfcl2\tmeanl4\tlfcl4\n";
while(<FILE>){
	chomp;
	my ($sgRNA,$gene,$c1,$c2,$c3,$c4,$h1,$h2,$h3,$h4,$l1,$l2,$l3,$l4)  = split;
	my $meanh1 = ($c1+$h1)/2;
	my $meanh2 = ($c2+$h2)/2;
	my $meanh3 = ($c3+$h3)/2;
	my $meanh4 = ($c4+$h4)/2;
	my $meanl1 = ($c1+$l1)/2;
	my $meanl2 = ($c2+$l2)/2;
	my $meanl4 = ($c4+$l4)/2;
	$c1+=1;$c2+=1;$c3+=1;$c4+=1;$h1+=1;$h2+=1;$h3+=1;$h4+=1;$l1+=1;$l2+=1;$l4+=1;
	my $lfch1 = log($h1/$c1)/log(2);
	my $lfch2 = log($h2/$c2)/log(2);
	my $lfch3 = log($h3/$c3)/log(2);
	my $lfch4 = log($h4/$c4)/log(2);
	my $lfcl1 = log($l1/$c1)/log(2);
	my $lfcl2 = log($l2/$c2)/log(2);
	my $lfcl4 = log($l4/$c4)/log(2);
	$geneCount{$gene}++;
	#next if ($meanh1<30 || $meanh2<30 || $meanh3<30 || $meanh4<30 || $meanl1<30 || $meanl2<30 || $meanl4<300);
	print OUT "$sgRNA\t$gene\t$meanh1\t$lfch1\t$meanh2\t$lfch2\t$meanh3\t$lfch3\t$meanh4\t$lfch4";
	print OUT "\t$meanl1\t$lfcl1\t$meanl2\t$lfcl2\t$meanl4\t$lfcl4\n";
	$hash{'high1'}->{"$sgRNA\t$gene"} = log($h1/$c1)/log(2);
	$hash{'high2'}->{"$sgRNA\t$gene"} = log($h2/$c2)/log(2);
	$hash{'high3'}->{"$sgRNA\t$gene"} = log($h3/$c3)/log(2);
	$hash{'high4'}->{"$sgRNA\t$gene"} = log($h4/$c4)/log(2);
	$hash{'low1'}->{"$sgRNA\t$gene"} = log($l1/$c1)/log(2);
	$hash{'low2'}->{"$sgRNA\t$gene"} = log($l2/$c2)/log(2);
	$hash{'low4'}->{"$sgRNA\t$gene"} = log($l4/$c4)/log(2);
}


my @replicate = qw/high1 high2 high3 high4 low1 low2 low4/;
foreach my $rep (@replicate){
	open OUT, ">GeCKO_riger_input_$rep.tsv";
	print OUT "Construct\tGeneSymbol\tNormalizedScore\tConstruct Rank\n";
	my $enrich = $hash{$rep};
	my $i = 0;
	my $sig = 0;
	print "$rep";
	foreach my $target (sort{$enrich->{$b}<=>$enrich->{$a}} keys %$enrich){
		my (undef,$gene) = split /\t/,$target;
		if($geneCount{$gene}>1){
			$i++;
			if ($enrich->{$target}>1){
				$sig++;
			}
			print OUT "$target\t$enrich->{$target}\t$i\n";
		}
		else{
			print "\t$i";
		}
	}
	print "\n";
	#print "$rep\t$sig\n";
}

foreach my $rep (@replicate){
	system("java -jar ~/apps/rigerj/target/rigerj-2.0.1-assembly.jar  -inputFile GeCKO_riger_input_$rep.tsv -scoringMethod SecondBestRank -outputFile GeCKO_enrich_SBR_$rep.txt")
}
