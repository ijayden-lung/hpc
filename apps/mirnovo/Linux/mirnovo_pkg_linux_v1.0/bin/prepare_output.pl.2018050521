#!/usr/bin/perl

use strict;
use warnings;
use threads;
use Cwd;


my $cur_out_dir = $ARGV[0];
my $genome_name = $ARGV[1];
my $USE_REFERENCE_GENOME = $ARGV[2];
my $PREDICT_WITH_MIRBASE_HITS = $ARGV[3];


my $wdir = getcwd;

my $fasta_out_dir = "$cur_out_dir/predicted_fasta_results";

my @pred_class = ('TP', 'FP', 'FN', 'novel_mirnas', 'other_seqs'); 

foreach(@pred_class){


	chdir $wdir;
	my @threads = ();

	my $pr_class = $_;
	my $p_file = "$fasta_out_dir/$pr_class.fa";
	# dbg: added 'new.'
	if($USE_REFERENCE_GENOME eq 'True'){	
		$p_file = "$fasta_out_dir/new.$pr_class.fa";
	}


	if(-e $p_file){ 

		my @p_ids = `cat $p_file | grep ">" | sed 's/^>//' `;
		#print "Number of $pr_class: ".scalar @p_ids."\n";

		#print join(", ", @p_ids)."\n";

		my $rna_fold_dir = "$cur_out_dir/rna_fold_dir";
		`mkdir -p $rna_fold_dir`;
		chdir $rna_fold_dir;

		
		if($USE_REFERENCE_GENOME eq 'True'){
			

			my $thr_cnt = 0;


			foreach(@p_ids){
				
				chomp;

				my $cl = $_;
				# dbg: new line, replace -3p, -5p with ''
				if($USE_REFERENCE_GENOME eq 'True'){
					$cl =~ s/\-[35]p//; 
				}


				push @threads, threads->create( sub{

					#print "$cl\n";

					my $fold_file = "$cl.3p.tmpFold.txt";
					if(!(-e $fold_file)){
						$fold_file = "$cl.5p.tmpFold.txt";
					}

					

					#print "fold_file: $fold_file\n";
					
					# dbg:
					if(-e $fold_file){
						my $o = `cat $fold_file |  ../../../../bin/util/RNAplot`;

						# trim trailing dots (deprecated)
						#my $o = `cat $fold_file | sed -e 's/^\\.*//' -e 's/\\.* / /' | ../../../../bin/util/RNAplot`;
						#print "o: $o\n";

						my $outps = "$cl\_ss.ps";
						#`ps2pdf $outps $outps.pdf`;
						# conver .ps to .png
						# dbg:
						`convert -density 200 -geometry 100% $outps $cl.png`;
					}
				 });
				
				$thr_cnt++;		

				if($thr_cnt >= 20){
					foreach (@threads) {
						$_->join();
					}
					$thr_cnt = 0;
					@threads = ();
				}

				

			}


			foreach (@threads) {
				$_->join();
			}
			
			# move hairpins to corresponding pred_class folder
			my $final_hairpings_out_dir = "../predicted_fasta_results/hairpins";
			`mkdir -p $final_hairpings_out_dir`;

			my $pr_class_dir = "$final_hairpings_out_dir/$pr_class";
			`mkdir -p $pr_class_dir`;
			# dbg:
            `mv *.png $pr_class_dir 2>/dev/null`;
		}


		# move coverage barplots to corresponding pred_class folder
		my $final_barplots_out_dir = "../predicted_fasta_results/coverage_barplots";
		`mkdir -p $final_barplots_out_dir`;

		my $pr_class_dir = "$final_barplots_out_dir/$pr_class";
		`mkdir -p $pr_class_dir`;
		
		if($USE_REFERENCE_GENOME eq 'True'){   
			for (@p_ids) {
			   s/\-[35]p//;
			   s/\-\d$//;
			}
		}

		my @uniq_p_ids = uniq(@p_ids);

		foreach (@uniq_p_ids){
			chomp;

			#$cl =~ s/\-[35]p//;
			#$cl =~ s/\-\d$//;
			#print "barpl cl: $cl\n";


			my $tmp_barpl = "../cluster_stats_barplots/barpl_$_.depth*.png";
			#my $tmp_barpl = "../cluster_stats_barplots/barpl_$_.png";
			
			# dbg:
			`mv $tmp_barpl $pr_class_dir`;
		}
	}

}




#chdir "../";
chdir "$wdir/$cur_out_dir";
if($USE_REFERENCE_GENOME eq 'True'){
	# post-process bowtie2 output to be parsable by R scripts
	my $bowtie2_out_file = "cons_seqs_bowtie.out.sam";
	`cat $bowtie2_out_file | cut -f1,2,3,4,10 > cluster_genomic_coords1.txt`;
	`cat $bowtie2_out_file | cut -f10 | awk '{ print length(\$0); }' > cluster_genomic_coords2.txt`;
	`paste cluster_genomic_coords1.txt cluster_genomic_coords2.txt > cluster_genomic_coords.txt.tmp`;
	`cat cluster_genomic_coords.txt.tmp | sed 's/cons_seqs_cluster/nalignm/g' > cluster_genomic_coords.txt`;
	`rm cluster_genomic_coords1.txt cluster_genomic_coords2.txt cluster_genomic_coords.txt.tmp`;
} else{
	my $consensus_seq_file = "consensus_sequences.fa";
	`cat $consensus_seq_file | grep '>' | sed 's/>cons_seqs_cluster/nalignm/' > cluster_genomic_coords_1.txt`;
	`cat $consensus_seq_file | grep -v '>'  > cluster_genomic_coords_2.txt`; 
	`cat $consensus_seq_file | grep -v '>' | awk '{ print length(\$0); }' > cluster_genomic_coords_3.txt`; 
	 my $all_clusters = `cat $consensus_seq_file | grep '>' | wc -l` + 0;
	`printf "'-'\n%.0s" {1..$all_clusters} > cluster_genomic_coords_empty.txt`;
	`paste cluster_genomic_coords_1.txt cluster_genomic_coords_empty.txt cluster_genomic_coords_empty.txt cluster_genomic_coords_empty.txt  cluster_genomic_coords_2.txt cluster_genomic_coords_3.txt > cluster_genomic_coords.txt`; 
	`rm cluster_genomic_coords_*.txt`;

	
}

if($PREDICT_WITH_MIRBASE_HITS eq 'True'){
	`touch predicted_fasta_results/PREDICT_WITH_MIRBASE_HITS`;
	`chmod 777 predicted_fasta_results/PREDICT_WITH_MIRBASE_HITS`;
}

sub uniq {
	my %seen;
        grep !$seen{$_}++, @_;
}
